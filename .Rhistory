per4_3<-periodogram(sample3$X4)
per4_4<-periodogram(sample4$X4)
per4_5<-periodogram(sample5$X4)
per4_6<-periodogram(sample6$X4)
per4_7<-periodogram(sample7$X4)
per4_8<-periodogram(sample8$X4)
per4_9<-periodogram(sample9$X4)
per4_10<-periodogram(sample10$X4)
per_df<-data.frame(freq= per1_1$freq,spec<-per1_1$spec)
per_df
per_df<-data.frame(freq= per1_1$freq,spec=per1_1$spec)
library(dplyr)
mean1_1<-mean(per_df$spec[1:100]))
mean(per_df$spec)
mean(per_df[1:100]$spec)
edit(periodogram)
?spec
#1
per1_1<-periodogram(sample1$X1)
per1_1$spec
per1_1$coh
per1_1$freq
per1_1$df
?periodogram
edit(periodogram)
edit(spec)
edit(TSA::spec)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
#1
per1_1<-periodogram(sample1$X1)
#2
per2_1<-periodogram(sample1$X2)
#3
per3_1<-periodogram(sample1$X3)
#4
per4_1<-periodogram(sample1$X4)
#1
per1_1<-periodogram(sample1$X1)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
per1_5<-periodogram(sample5$X1)
per1_6<-periodogram(sample6$X1)
per1_7<-periodogram(sample7$X1)
library(swirl)
swirl()
my_df<-read.csv("path2csv",stringsAsFactors = FALSE)
my_df<-read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
rm(my_df)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_rach)
select(cran,country:r_arch)
crain
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version=="3.1.1", country=="US")
?cpmparison
?comparison
?Comparison
filter(cran,r_version=="3.0.2", country=="IN")
filter(cran,r_version<="3.0.2", country=="IN")
filter(cran,r_version<="3.0.2| country=="IN")
filter(cran,r_version<="3.0.2"| country=="IN")
filter(cran,country=="US"| country=="IN")
filter(cran,size> 100500 & r_os=="linux-gnu")
filter(cran,size> 100500 , r_os=="linux-gnu")
is.na(c(3,,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size.mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size = size-1000)
mutate(cran3,correct_size = size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(top_counts,unique>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(count))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
result3
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
gather()
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key = sex_class)
res<-gather(students2,key = sex_class,count,-grade)
res
?separate
separate(res,sex_class,sep = "_")
separate(res,sex_class,into = ("sex","class"))
separate(res,col=sex_class,into = ("sex","class"))
separate(res,col=sex_class,into = c("sex", "class"))
View(students2)
submit()
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
library(reader)
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
pass
passed
failed
passed
passed<-passed%>% mutate(status ="passed")
failed<-failed%>% mutate(status ="failed")
package_version("dplyr")
packageVersion("dplyr")
bind_rows(passed,failed)
sat
submit()
?group_by
submit()
setwd("~/GitHub/Getting-and-Cleaning-Data-Course-Project")
setwd("~/GitHub/Getting-and-Cleaning-Data-Course-Project")
###reading the directory
dirpath <-"//GitHub/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset"
###locating files
## Locating files
filesdirpath<-list.files(dirpath,full.names = TRUE)
###reading the directory
dirpath <-"C:/Users/Users/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset"
###locating files
## Locating files
filesdirpath<-list.files(dirpath,full.names = TRUE)
###reading the directory
dirpath <-"C:/Users/User/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset"
###locating files
## Locating files
filesdirpath<-list.files(dirpath,full.names = TRUE)
dirpath_test <-"C:/Users/User/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset/test"
dirpath_train <-"C:/Users/User/Documents/GitHub/Getting-and-Cleaning-Data-Course-Project/UCI HAR Dataset/train"
###locating files
## Locating files
filesdirpath<-list.files(dirpath,full.names = TRUE)
filesdirtest<-list.files(dirpath_test,full.names = TRUE)
filesdirtrain<-list.files(dirpath_train,full.names = TRUE)
## Loading files
## Activity Labels
activity_labels<-read.table(filesdirpath[1])
## features
features<-read.table(filesdirpath[2])
##subject
subject<-rbind(read.table(filesdirtrain[2]),read.table(filesdirtest[2]))
## Values
x<-rbind(read.table(filesdirtrain[3]),read.table(filesdirtest[3]))
y<-rbind(read.table(filesdirtrain[4]),read.table(filesdirtest[4]))
#Process to tydy data
names(activity_labels)<-c('ida','activity')
names(subject)<-c('ids')
names(y)<-c('ida')
names(x)<-features[,2]
data1 = cbind(y, subject)
data = cbind(y, subject)
data <-merge(data,activity_labels,by="ida", all.y=T)
tidy_data <-data.frame(data,x)
View(tidy_data)
head(tidy_data)
head(x)
?data.frame
View(data)
View(y)
View(subject)
View(activity_labels)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
library(dplyr)
select(tidy_data,contains(mean)&contains(std))
select(tidy_data,contains("mean")&contains("std"))
select(tidy_data,contains("mean")|contains("std"))
?select
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key = "sex_class",value = count)
res<-gather(students2,key = "sex_class",value = count,-grade)
View(res)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(data = res,col = sex_class,into = c("sex","class"))
View(students2)
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number(class5)
parse_number("class5")
submit()
submit()
students3
students4
submit()
submit()
submit()
passed
failed
View(passed)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
packageVersion("dplyr")
bind_rows(passed,failed)
sat
?selection
?select
submit()
submit()
View(sat)
submit()
submit()
submit()
submit()
submit()
submit()
select(tidy_data,contains("mean"))
select(tidy_data,contains("mean"|"std"))
rm(res)
rm(student_info)
rm(students)
rm(students2)
rm(students3)
rm(students4)
meantest<-select(tidy_data,contains("mean"))
stdtest<-select(tidy_data,contains("std"))
View(meantest)
grep(".*mean.*|.*std.*", tidy_data)
?grep
activity_<-read.table("activity_labels")
activity_<-read.table(activity_labels)
only_mean_std<-rbind(meantest,stdtest)
only_mean_std<-cbind(meantest,stdtest)
activity_labels
only_mean_std
# Read  all files
## Activity Labels
activity_labels<-read.table("filesdirpath[1]")
## Values
x_train<-read.table(filesdirtrain[3])
x_test<-read.table(filesdirtest[3])
#1. Merges the training and the test sets to create one data set.
x<-rbind(x_train,x_test)
y_train<-read.table(filesdirtrain[4])
y_test<-read.table(filesdirtest[4])
#1. Merges the training and the test sets to create one data set.
x<-rbind(x_train,x_test)
y<-rbind(y_train,y_test)
rm(x_train,x_test,y_train,y_test)
rm(passed)
rm(failed)
rm(sat)
rm(gradebook)
rm(stdtest)
View(y)
names(y)<-c('label')
names(x)<-features[,2]
View(y)
View(subject)
View(activity_labels)
View(data)
data = cbind(y, subject)
View(data)
y_test<-read.table(filesdirtest[4])
rm(y_test)
label = cbind(y, subject)
View(activity_labels)
data <-merge(label,activity_labels,by="ida", all.y=T)
View(y)
##names data
names(activity_labels)<-c('label','activity')
data <-merge(label,activity_labels,by="ida", all.y=T)
data <-merge(label,activity_labels,by="label", all.y=T)
View(data)
head(x)
tidy_data <-data.frame(data,x)
View(data)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
# determine columns of data set to keep based on column name...
columnsToKeep <- grepl("subject|activity|mean|std", colnames(tidy_data))
# ... and keep data in these columns only
only_mean_std <- tidy_data[, columnsToKeep]
View(only_mean_std)
View(subject)
mean_std <- grepl("ids|activity|mean|std", colnames(tidy_data))
t_data_2 <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
t_data_2<- factor(t_data_2$activity,
levels = activity_labels[, 1],
labels = activity_labels[, 2])
t_data_2 <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
t_data_2$activity<- factor(t_data_2$activity,
levels = activity_labels[, 1],
labels = activity_labels[, 2])
View(t_data_2)
activity_labels[, 1]
t_data_2 <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
t_data_2$activity<- factor(t_data_2$activity,
levels = activity_labels[, 1],
labels = activity_labels[, 2])
t_data_2 <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
t_data_2$activity<- factor(t_data_2$activity,
levels = activity_labels[, 2],
labels = activity_labels[, 1])
t_data_2 <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
t_data_2$activity<- factor(t_data_2$activity,
levels = activity_labels[, 2],
labels = activity_labels[, 1])
#4. Appropriately labels the data set with descriptive variable names.
# get column names
Colname <- colnames(t_data_2)
colnames
colname
Colname
# remove special characters
NumColName <- gsub("[\\(\\)-]", "", Colname)
NumColName
# expand abbreviations and clean up names
Colname <- gsub("^f", "frequencyDomain", Colname)
Colname <- gsub("^f", "frequencyDomain", Colname)
Colname <- gsub("^t", "timeDomain", Colname)
Colname <- gsub("Acc", "Accelerometer", Colname)
Colname <- gsub("Gyro", "Gyroscope", Colname)
Colname <- gsub("Mag", "Magnitude", Colname)
Colname <- gsub("Freq", "Frequency", Colname)
Colname <- gsub("mean", "Mean", Colname)
Colname <- gsub("std", "StandardDeviation", Colname)
Colname
Colname <- gsub("BodyBody", "Body", Colname)
colnames(t_data_2)<-Colname
#5. From the data set in step 4, creates a second,
#  independent tidy data set with the average of each
#  variable for each activity and each subject.
## group by subject and activity and summarise using mean
tidy_dataMeans <- tidy_data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
#5. From the data set in step 4, creates a second,
#  independent tidy data set with the average of each
#  variable for each activity and each subject.
## group by subject and activity and summarise using mean
tidy_dataMeans <- tidy_data %>%
group_by(ids, activity) %>%
summarise_each(funs(mean))
#1. Merges the training and the test sets to create one data set.
x<-rbind(x_train,x_test)
y<-rbind(y_train,y_test)
names(y)<-c('label')
names(x)<-features[,2]
activity_labels<-read.table(filesdirpath[1])
## Features
features<-read.table(filesdirpath[2])
##subject
subject<-rbind(read.table(filesdirtrain[2]),read.table(filesdirtest[2]))
## Values
x_train<-read.table(filesdirtrain[3])
x_test<-read.table(filesdirtest[3])
y_train<-read.table(filesdirtrain[4])
y_test<-read.table(filesdirtest[4])
##names data
names(activity_labels)<-c('label','activity')
names(subject)<-c('ids')
#1. Merges the training and the test sets to create one data set.
x<-rbind(x_train,x_test)
y<-rbind(y_train,y_test)
names(y)<-c('label')
names(x)<-features[,2]
rm(x_train,x_test,y_train,y_test)
label = cbind(y, subject)
data <-merge(label,activity_labels,by="label", all.y=T)
tidy_data <-data.frame(data,x)
# output to file "tidy_data.txt"
write.table(tidy_data, "tidy_data.txt", row.names = FALSE,
quote = FALSE)
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
mean_std <- grepl("ids|activity|mean|std", colnames(tidy_data))
tidy_data <- tidy_data[, mean_std]
#3. Uses descriptive activity names to name the activities in the data set
tidy_data$activity<- factor(tidy_data$activity,
levels = activity_labels[, 2],
labels = activity_labels[, 1])
#4. Appropriately labels the data set with descriptive variable names.
## get column names
Colname <- colnames(tidy_data)
## expand abbreviations and clean up names
Colname <- gsub("^f", "frequencyDomain", Colname)
Colname <- gsub("^t", "timeDomain", Colname)
Colname <- gsub("Acc", "Accelerometer", Colname)
Colname <- gsub("Gyro", "Gyroscope", Colname)
Colname <- gsub("Mag", "Magnitude", Colname)
Colname <- gsub("Freq", "Frequency", Colname)
Colname <- gsub("mean", "Mean", Colname)
Colname <- gsub("std", "StandardDeviation", Colname)
Colname <- gsub("BodyBody", "Body", Colname)
##replace colnames
colnames(tidy_data)<-Colname
#5. From the data set in step 4, creates a second,
#  independent tidy data set with the average of each
#  variable for each activity and each subject.
## group by subject and activity and summarise using mean
tidy_dataMeans <- tidy_data %>%
group_by(ids, activity) %>%
summarise_each(funs(mean))
# output to file "tidy_data2.txt"
write.table(tidy_dataMeans, "tidy_data_2.txt", row.names = FALSE,
quote = FALSE)
View(x)
## Values
x_train<-read.table(filesdirtrain[3])
y_train<-read.table(filesdirtrain[4])
x_test<-read.table(filesdirtest[3])
tidy_dataMeans<- group_by(tidy_data,ids, activity)
library(dplyr)
library(tidyr)
tidy_dataMeans<- group_by(tidy_data,ids, activity)
tidy_dataMeans<- summarise_each(tidy_dataMeans,funs(mean))
