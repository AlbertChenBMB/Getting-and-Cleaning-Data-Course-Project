m<<-NULL
}
get<- function()x
setmean <- function(mean) m<< -mean
getmean<- function()m
list(set=set,get=get,
setmean = setmean,
getmean =getmean)
}
makeVector<-function(x-numeric()){
m<-NULL
set<-function(y){
x <<- y
m <<- NULL
}
ge t<- function()x
setmean <- function(mean) m << -mean
getmean<- function()m
list(set=set,get=get,
setmean = setmean,
getmean =getmean)
}
makeVector<-function(x=numeric()){
m<-NULL
set<-function(y){
x <<- y
m <<- NULL
}
ge t<- function()x
setmean <- function(mean) m << -mean
getmean<- function()m
list(set=set,get=get,
setmean = setmean,
getmean =getmean)
}
makeVector<-function(x=numeric()){
m<-NULL
set<-function(y){
x <<- y
m <<- NULL
}
get<- function()x
setmean <- function(mean) m << -mean
getmean<- function()m
list(set=set,get=get,
setmean = setmean,
getmean =getmean)
}
makeCacheMatrix <- function(myMatrix = matrix()){
#set a null value for the inverse value
inv.matrix <- NULL
#set the value of myMatrix and reset the inverse value
set <- function(A){
myMatrix <<- A
inv.matrix <<- NULL
}
#check the matrix
get <- function() myMatrix
#set the inverse value
setInv <- function(inverse) inv.matrix <<- inverse
#check the inverse value
getInv <- function() inv.matrix
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
set <- function(A){
myMatrix <<- A
inv.matrix <<- NULL
}
set(iris)
test<-set(iris)
test
myMatrix<<-A
myMatrix<<-c(0,1,2,3)
inv<<-NULL
class(inv)
anv<-NULL
get <-function()myMatrix
get
makeCacheMatrix <- function(myMatrix = matrix()){
#set a null value for the inverse value
inv.matrix <- NULL
#set the value of myMatrix and reset the inverse value
set <- function(A){
myMatrix <<- A
inv.matrix <<- NULL
}
#check the matrix
get <- function() myMatrix
#set the inverse value
setInv <- function(inverse) inv.matrix <<- inverse
#check the inverse value
getInv <- function() inv.matrix
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
makeCacheMatrix(iris)
cacheSolve <- function(myMatrix, ...){
#checking the existing inverse value
inv.matrix <- myMatrix$getInv()
if(!is.null(inv.matrix)){
message("getting cached data")
return(inv.matrix)
}
mtrx <- myMatrix$get()
#the matrix should be assigned in some time
if(is.na(mtrx)){
message("The matrix inside myMatrix has not been set yet!")
return()
}
#matrix needs to be inversable
else if(nrow(mtrx) != ncol(mtrx) || det(mtrx) == 0){
message("The matrix is not inversable!")
return()
}
#calculate the inverse and set the value for that
else{
inv.matrix <- solve(mtrx)
myMatrix$setInv(inv.matrix)
return(inv.matrix)
}
}
cacheSolve(myMatrix)
cacheSolve(myMatrix=iris)
cacheSolve(iris)
myMatrix
myMatrix<-matrix(1:30,3,10)
cacheSolve(myMatrix)
class(myMatrix)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5,2)
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div=2)
args(remainder)
submit()
submit()
evaluate(sum,c(2,4))
x<-evaluate(sum,c(2,4))
x
x<-evaluate(sum,c(2,4))
x
evaluate(sum,c(2,4))
submit()
submit()
submit()
evaluate(sum,c(2,4))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("GOOD")
submit()
telegram("GOOD")
submit()
submit()
mad_libs(school,work,Bird)
mad_libs("school","work","Bird")
submit()
I%p%love%p%R!
"I"%p%"love"%p%"R!"
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
View(flags)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
#Bsyes Decision
install.packages("e1071")
#Bsyes Decision
library("e1071")
data("iris")
m<-naiveBayes(Species ~.,data=iris)
m
library(dplyr)
?select
install.packages("xlsx")
#test
library(xlsx)
setwd("C:/Users/glab/Desktop/比賽/sample_data/806初賽訓練數據")
test1<-read.xlsx("20160419001_2016419_114348.xls")
?read.xlsx
test1<-read.xlsx("20160419001_2016419_114348.xls",1)
View(test1)
test1<-read.xlsx("20160419001_2016419_114348.xls",1,header = TRUE)
test1<-read.xlsx("20160419001_2016419_114348.xls",1,header = F)
View(test1)
install.packages("TSA")
sample1<-test1[1:7500]
library(TSA)
sample1<-test1[,1:7500]
sample1<-test1[1:7500,]
per<-periodogram(sample1)
View(sample1)
per<-periodogram(sample1$X1)
per2<-periodogram(sample1$X2)
per3<-periodogram(sample1$X3)
per4<-periodogram(sample1$X4)
test1<-read.xlsx("20160419001_2016419_114348.xls",1,header = F)
test1<-read.xlsx("20160419001_2016419_114348.xls",1,header = F)sample1<-test1[1:7500,]
test2<-read.xlsx("20160419002_2016419_132916.xls",1,header = F)
test3<-read.xlsx("20160419004_2016419_153453.xls",1,header = F)
test4<-read.xlsx("20160419005_2016419_164411.xls",1,header = F)
test5<-read.xlsx("20160421002_2016421_171815.xls",1,header = F)
test6<-read.xlsx("20160421003_2016421_182129.xls.xls",1,header = F)
test7<-read.xlsx("20160422001_2016422_95822.xls",1,header = F)
test8<-read.xlsx("20160422002_2016422_111140.xls",1,header = F)
test9<-read.xlsx("20160422003_2016422_161044.xls",1,header = F)
test10<-read.xlsx("20160425002_2016425_104626.xls",1,header = F)
sample1<-test1[1:7500,]
sample2<-test2[1:7500,]
sample3<-test3[1:7500,]
sample4<-test4[1:7500,]
sample5<-test5[1:7500,]
sample6<-test6[1:7500,]
sample7<-test7[1:7500,]
sample8<-test8[1:7500,]
sample9<-test9[1:7500,]
sample10<-test10[1:7500,]
test6<-read.xlsx("20160421003_2016421_182129.xls",1,header = F)
sample6<-test6[1:7500,]
per2<-periodogram(sample1$X1)
#1
per1_1<-periodogram(sample1$X1)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
per1_5<-periodogram(sample5$X1)
per1_6<-periodogram(sample6$X1)
per1_7<-periodogram(sample7$X1)
per1_8<-periodogram(sample8$X1)
per1_9<-periodogram(sample9$X1)
per1_10<-periodogram(sample10$X1)
#1
per1_1<-periodogram(sample1$X1)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
per1_5<-periodogram(sample5$X1)
per1_6<-periodogram(sample6$X1)
per1_7<-periodogram(sample7$X1)
per1_8<-periodogram(sample8$X1)
per1_9<-periodogram(sample9$X1)
per1_10<-periodogram(sample10$X1)
#2
per2_1<-periodogram(sample1$X2)
per2_2<-periodogram(sample2$X2)
per2_3<-periodogram(sample3$X2)
per2_4<-periodogram(sample4$X2)
per2_5<-periodogram(sample5$X2)
per2_6<-periodogram(sample6$X2)
per2_7<-periodogram(sample7$X2)
per2_8<-periodogram(sample8$X2)
per2_9<-periodogram(sample9$X2)
per2_10<-periodogram(sample10$X2)
#3
per3_1<-periodogram(sample1$X3)
per3_2<-periodogram(sample2$X3)
per3_3<-periodogram(sample3$X3)
per3_4<-periodogram(sample4$X3)
per3_5<-periodogram(sample5$X3)
per3_6<-periodogram(sample6$X3)
per3_7<-periodogram(sample7$X3)
per3_8<-periodogram(sample8$X3)
per3_9<-periodogram(sample9$X3)
per3_10<-periodogram(sample10$X3)
#4
per4_1<-periodogram(sample1$X4)
per4_2<-periodogram(sample2$X4)
per4_3<-periodogram(sample3$X4)
per4_4<-periodogram(sample4$X4)
per4_5<-periodogram(sample5$X4)
per4_6<-periodogram(sample6$X4)
per4_7<-periodogram(sample7$X4)
per4_8<-periodogram(sample8$X4)
per4_9<-periodogram(sample9$X4)
per4_10<-periodogram(sample10$X4)
per_df<-data.frame(freq= per1_1$freq,spec<-per1_1$spec)
per_df
per_df<-data.frame(freq= per1_1$freq,spec=per1_1$spec)
library(dplyr)
mean1_1<-mean(per_df$spec[1:100]))
mean(per_df$spec)
mean(per_df[1:100]$spec)
edit(periodogram)
?spec
#1
per1_1<-periodogram(sample1$X1)
per1_1$spec
per1_1$coh
per1_1$freq
per1_1$df
?periodogram
edit(periodogram)
edit(spec)
edit(TSA::spec)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
#1
per1_1<-periodogram(sample1$X1)
#2
per2_1<-periodogram(sample1$X2)
#3
per3_1<-periodogram(sample1$X3)
#4
per4_1<-periodogram(sample1$X4)
#1
per1_1<-periodogram(sample1$X1)
per1_2<-periodogram(sample2$X1)
per1_3<-periodogram(sample3$X1)
per1_4<-periodogram(sample4$X1)
per1_5<-periodogram(sample5$X1)
per1_6<-periodogram(sample6$X1)
per1_7<-periodogram(sample7$X1)
library(swirl)
swirl()
my_df<-read.csv("path2csv",stringsAsFactors = FALSE)
my_df<-read.csv(path2csv,stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
rm(my_df)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_rach)
select(cran,country:r_arch)
crain
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version=="3.1.1", country=="US")
?cpmparison
?comparison
?Comparison
filter(cran,r_version=="3.0.2", country=="IN")
filter(cran,r_version<="3.0.2", country=="IN")
filter(cran,r_version<="3.0.2| country=="IN")
filter(cran,r_version<="3.0.2"| country=="IN")
filter(cran,country=="US"| country=="IN")
filter(cran,size> 100500 & r_os=="linux-gnu")
filter(cran,size> 100500 , r_os=="linux-gnu")
is.na(c(3,,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size.mb=size/2^20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size = size-1000)
mutate(cran3,correct_size = size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
top_unique<-filter(top_counts,unique>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(count))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
result3
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
gather()
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,key = sex_class)
res<-gather(students2,key = sex_class,count,-grade)
res
?separate
separate(res,sex_class,sep = "_")
separate(res,sex_class,into = ("sex","class"))
separate(res,col=sex_class,into = ("sex","class"))
separate(res,col=sex_class,into = c("sex", "class"))
View(students2)
submit()
submit()
students3
?gather
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
library(reader)
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
pass
passed
failed
passed
passed<-passed%>% mutate(status ="passed")
failed<-failed%>% mutate(status ="failed")
package_version("dplyr")
packageVersion("dplyr")
bind_rows(passed,failed)
sat
submit()
?group_by
submit()
setwd("~/GitHub/Getting-and-Cleaning-Data-Course-Project")
